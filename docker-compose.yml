version: '3.8'

services:
  vsph-config-server:
    container_name: vsph-config-server
    ports:
      - '5160:8888'
    image: milosz08/vsph-config-server:latest
    pull_policy: always
    environment:
      - 'SPRING_PROFILES_ACTIVE=docker'
      - 'VSPH_VAULT_ROOT_TOKEN=${VSPH_VAULT_ROOT_TOKEN}'
      - 'VSPH_SPRING_CONFIG_USERNAME=${VSPH_SPRING_CONFIG_USERNAME}'
      - 'VSPH_SPRING_CONFIG_PASSWORD=${VSPH_SPRING_CONFIG_PASSWORD}'
    networks:
      - visphere-infra-network

  vsph-discovery-server:
    container_name: vsph-discovery-server
    ports:
      - '5161:8761'
    image: milosz08/vsph-discovery-server:latest
    pull_policy: always
    environment:
      - 'SPRING_PROFILES_ACTIVE=docker'
      - 'VSPH_VAULT_ROOT_TOKEN=${VSPH_VAULT_ROOT_TOKEN}'
      - 'VSPH_SPRING_CONFIG_USERNAME=${VSPH_SPRING_CONFIG_USERNAME}'
      - 'VSPH_SPRING_CONFIG_PASSWORD=${VSPH_SPRING_CONFIG_PASSWORD}'
    depends_on:
      - vsph-vault
      - vsph-config-server
    networks:
      - visphere-infra-network

  vsph-postgresql-db:
    container_name: vsph-postgresql-db
    image: postgres:15.4-alpine
    ports:
      - '${VSPH_DEV_POSTGRESQL_PORT}:5432'
    environment:
      - 'POSTGRES_USER=${VSPH_POSTGRES_USERNAME}'
      - 'POSTGRES_PASSWORD=${VSPH_POSTGRES_PASSWORD}'
      - 'POSTGRES_DB=postgres'
    volumes:
      - ./.volumes/db/postgres_init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./.volumes/db/postgres-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 6
    networks:
      - visphere-infra-network

  vsph-cassandra-db:
    container_name: vsph-cassandra-db
    image: bitnami/cassandra:4.1.3
    ports:
      - '${VSPH_DEV_CASSANDRA_PORT}:9042'
    volumes:
      - ./.volumes/db/cassandra-volume:/bitnami
    environment:
      - 'CASSANDRA_CLUSTER_NAME=vsph-cluster'
      - 'CASSANDRA_PASSWORD_SEEDER=yes'
      - 'CASSANDRA_USER=${VSPH_CASSANDRA_USERNAME}'
      - 'CASSANDRA_PASSWORD=${VSPH_CASSANDRA_PASSWORD}'
    healthcheck:
      test: [ "CMD-SHELL", "[ $$(nodetool statusgossip) = running ]" ]
      interval: 30s
      timeout: 10s
      retries: 6
    networks:
      - visphere-infra-network

  vsph-redis-db:
    container_name: vsph-redis-db
    image: bitnami/redis:6.2.14
    ports:
      - '${VSPH_DEV_REDIS_PORT}:6379'
    volumes:
      - ./.volumes/db/redis-volume:/bitnami
    environment:
      - 'REDIS_PASSWORD=${VSPH_REDIS_PASSWORD}'
    command: /opt/bitnami/scripts/redis/run.sh --maxmemory 100mb && sysctl vm.overcommit_memory=1
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 6
    networks:
      - visphere-infra-network

  vsph-mailhog:
    container_name: vsph-mailhog
    image: mailhog/mailhog:v1.0.1
    ports:
      - '${VSPH_DEV_MAILHOG_PORT}:1025'
      - '${VSPH_DEV_MAILHOG_CLIENT_PORT}:8025'
    environment:
      - 'MH_STORAGE=maildir'
      - 'MH_MAILDIR_PATH=/home/mailhog'
    volumes:
      - ./.volumes/mail/mailhog-volume:/home/mailhog
      - ./.volumes/mail/mailhog.conf:/etc/supervisor/conf.d
      - ./.volumes/mail/mailhog-auth.txt:/etc/mailhog-auth.txt
    networks:
      - visphere-infra-network

  vsph-vault:
    container_name: vsph-vault
    image: hashicorp/vault:1.14
    ports:
      - '${VSPH_DEV_VAULT_PORT}:8200'
    volumes:
      - ./.volumes/vault/vault-volume:/vault/data:rw
      - ./.volumes/vault:/vault/config
      - ./.env:/.env
    environment:
      - 'VAULT_ADDR=http://127.0.0.1:8200'
    cap_add:
      - IPC_LOCK
    entrypoint: vault server -config=/vault/config/vault.hcl
    networks:
      - visphere-infra-network

  vsph-s3:
    container_name: vsph-s3
    image: bitnami/minio:2023.9.27
    ports:
      - '${VSPH_DEV_S3_API_PORT}:9000'
      - '${VSPH_DEV_S3_PORT}:9001'
    environment:
      - 'MINIO_ROOT_USER=${VSPH_S3_USERNAME}'
      - 'MINIO_ROOT_PASSWORD=${VSPH_S3_PASSWORD}'
      - 'MINIO_DEFAULT_BUCKETS=spheres:public,users:public,emails:private'
      - 'MINIO_SCHEME=http'
    volumes:
      - ./.volumes/s3/s3-volume:/bitnami/minio/data
    healthcheck:
      test: 'curl --fail http://localhost:9000/minio/health/live || exit 1'
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - visphere-infra-network

  vsph-kafka-zookeeper:
    container_name: vsph-kafka-zookeeper
    image: confluentinc/cp-zookeeper:7.5.1
    hostname: localhost
    user: root
    ports:
      - '${VSPH_DEV_KAFKA_ZOOKEEPER_PORT}:2181'
      - '${VSPH_DEV_KAFKA_ZOOKEEPER_SSL_PORT}:2182'
    environment:
      - 'ZOOKEEPER_CLIENT_PORT=2181'
      - 'ZOOKEEPER_TICK_TIME=2000'
      - 'ZOOKEEPER_SECURE_CLIENT_PORT=2182'
      - 'ZOOKEEPER_SSL_KEYSTORE_LOCATION=/etc/kafka/secrets/zoo/zoo.docker.keystore.jks'
      - 'ZOOKEEPER_SSL_KEYSTORE_PASSWORD=${VSPH_KAFKA_BROKER_PASSWORD}'
      - 'ZOOKEEPER_SSL_KEYSTORE_TYPE=JKS'
      - 'ZOOKEEPER_SSL_TRUSTSTORE_LOCATION=/etc/kafka/secrets/zoo/zoo.docker.truststore.jks'
      - 'ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD=${VSPH_KAFKA_BROKER_PASSWORD}'
      - 'ZOOKEEPER_SSL_TRUSTSTORE_TYPE=JKS'
      - 'ZOOKEEPER_SERVER_CNXN_FACTORY=org.apache.zookeeper.server.NettyServerCnxnFactory'
      - 'ZOOKEEPER_SSL_CLIENT_AUTH=need'
      - 'ZOOKEEPER_AUTH_PROVIDER_X509=org.apache.zookeeper.server.auth.X509AuthenticationProvider'
      - 'ZOOKEEPER_AUTH_PROVIDER_SASL=org.apache.zookeeper.server.auth.SASLAuthenticationProvider'
      - 'KAFKA_OPTS=-Djava.security.auth.login.config=/etc/kafka/secrets/zoo_jaas.conf'
    volumes:
      - ./.volumes/kafka/secrets/zoo:/etc/kafka/secrets/zoo
      - ./.volumes/kafka/secrets/zoo_jaas.conf:/etc/kafka/secrets/zoo_jaas.conf
      - ./.volumes/kafka/zookeeper-volume/data:/var/lib/zookeeper/data
      - ./.volumes/kafka/zookeeper-volume/log:/var/lib/zookeeper/log
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      retries: 20
      interval: 10s
    networks:
      - visphere-infra-network

  vsph-kafka-broker:
    container_name: vsph-kafka-broker
    image: confluentinc/cp-kafka:7.5.1
    hostname: localhost
    user: root
    ports:
      - '${VSPH_DEV_KAFKA_BROKER_PORT}:9092'
      - '${VSPH_DEV_KAFKA_BROKER_SSL_PORT}:9093'
    environment:
      - 'KAFKA_BROKER_ID=1'
      - 'KAFKA_ZOOKEEPER_CONNECT=vsph-kafka-zookeeper:2182'
      - 'KAFKA_ZOOKEEPER_SSL_CLIENT_ENABLE=true'
      - 'KAFKA_ZOOKEEPER_CLIENT_CNXN_SOCKET=org.apache.zookeeper.ClientCnxnSocketNetty'
      - 'KAFKA_ZOOKEEPER_SSL_KEYSTORE_LOCATION=/etc/kafka/secrets/zoo/zoo.docker.keystore.jks'
      - 'KAFKA_ZOOKEEPER_SSL_KEYSTORE_PASSWORD=${VSPH_KAFKA_BROKER_PASSWORD}'
      - 'KAFKA_ZOOKEEPER_SSL_KEYSTORE_TYPE=JKS'
      - 'KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_LOCATION=/etc/kafka/secrets/zoo/zoo.docker.truststore.jks'
      - 'KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD=${VSPH_KAFKA_BROKER_PASSWORD}'
      - 'KAFKA_ZOOKEEPER_SSL_TRUSTSTORE_TYPE=JKS'
      - 'KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,SASL_SSL://localhost:9093,INTERNAL://vsph-kafka-broker:9094'
      - 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,SASL_SSL:SASL_SSL,INTERNAL:SASL_SSL'
      - 'KAFKA_SSL_KEYSTORE_FILENAME=kafka.keystore.jks'
      - 'KAFKA_SSL_KEYSTORE_CREDENTIALS=ssl.cred'
      - 'KAFKA_SSL_KEY_CREDENTIALS=ssl.cred'
      - 'KAFKA_SSL_TRUSTSTORE_FILENAME=kafka.truststore.jks'
      - 'KAFKA_SSL_TRUSTSTORE_CREDENTIALS=ssl.cred'
      - 'KAFKA_SSL_CLIENT_AUTH=required'
      - 'KAFKA_SECURITY_PROTOCOL=SASL_SSL'
      - 'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1'
      - 'KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS=1'
      - 'KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1'
      - 'KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1'
      - 'KAFKA_LOG_RETENTION_HOURS=1'
      - 'KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN'
      - 'KAFKA_SASL_ENABLED_MECHANISMS=PLAIN'
      - 'KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS=PLAIN'
      - 'KAFKA_OPTS=-Djava.security.auth.login.config=/etc/kafka/secrets/broker_jaas.conf'
    volumes:
      - ./.volumes/kafka/secrets/broker_jaas.conf:/etc/kafka/secrets/broker_jaas.conf
      - ./.volumes/kafka/secrets/ssl.cred:/etc/kafka/secrets/ssl.cred
      - ./.volumes/kafka/secrets/zoo:/etc/kafka/secrets/zoo
      - ./.volumes/kafka/secrets/local/kafka.keystore.jks:/etc/kafka/secrets/kafka.keystore.jks
      - ./.volumes/kafka/secrets/local/kafka.truststore.jks:/etc/kafka/secrets/kafka.truststore.jks
      - ./.volumes/kafka/kafka-volume:/var/lib/kafka/data
    depends_on:
      - vsph-kafka-zookeeper
    networks:
      - visphere-infra-network

  vsph-api-gateway:
    container_name: vsph-api-gateway
    ports:
      - '5055:8080'
    image: milosz08/vsph-api-gateway:latest
    pull_policy: always
    environment:
      - 'SPRING_PROFILES_ACTIVE=docker'
      - 'VSPH_DOCKER_LANDING_PORT=${VSPH_DOCKER_LANDING_PORT}'
      - 'VSPH_DOCKER_CLIENT_PORT=${VSPH_DOCKER_CLIENT_PORT}'
      - 'VSPH_VAULT_ROOT_TOKEN=${VSPH_VAULT_ROOT_TOKEN}'
      - 'VSPH_SPRING_CONFIG_USERNAME=${VSPH_SPRING_CONFIG_USERNAME}'
      - 'VSPH_SPRING_CONFIG_PASSWORD=${VSPH_SPRING_CONFIG_PASSWORD}'
    depends_on:
      - vsph-config-server
      - vsph-discovery-server
    networks:
      - visphere-infra-network

  vsph-m-auth-service:
    extends:
      file: ./vsph-m-auth-service/docker-compose.yml
      service: vsph-m-auth-service-template
    depends_on:
      - vsph-config-server
      - vsph-discovery-server
      - vsph-api-gateway
      - vsph-postgresql-db
      - vsph-redis-db
      - vsph-s3
    networks:
      - visphere-infra-network

  vsph-m-misc-service:
    extends:
      file: ./vsph-m-misc-service/docker-compose.yml
      service: vsph-m-misc-service-template
    depends_on:
      - vsph-config-server
      - vsph-discovery-server
      - vsph-api-gateway
      - vsph-postgresql-db
      - vsph-redis-db
      - vsph-s3
    networks:
      - visphere-infra-network

  vsph-m-multimedia-service:
    extends:
      file: ./vsph-m-multimedia-service/docker-compose.yml
      service: vsph-m-multimedia-service-template
    depends_on:
      - vsph-config-server
      - vsph-discovery-server
      - vsph-api-gateway
      - vsph-postgresql-db
      - vsph-redis-db
      - vsph-s3
    networks:
      - visphere-infra-network

  vsph-m-notification-service:
    extends:
      file: ./vsph-m-notification-service/docker-compose.yml
      service: vsph-m-notification-service-template
    depends_on:
      - vsph-config-server
      - vsph-discovery-server
      - vsph-api-gateway
      - vsph-postgresql-db
      - vsph-redis-db
      - vsph-s3
    networks:
      - visphere-infra-network

  vsph-m-oauth2-client-service:
    extends:
      file: ./vsph-m-oauth2-client-service/docker-compose.yml
      service: vsph-m-oauth2-client-service-template
    depends_on:
      - vsph-config-server
      - vsph-discovery-server
      - vsph-api-gateway
    networks:
      - visphere-infra-network

  vsph-m-sphere-service:
    extends:
      file: ./vsph-m-sphere-service/docker-compose.yml
      service: vsph-m-sphere-service-template
    depends_on:
      - vsph-config-server
      - vsph-discovery-server
      - vsph-api-gateway
      - vsph-postgresql-db
      - vsph-redis-db
      - vsph-s3
    networks:
      - visphere-infra-network

networks:
  visphere-infra-network:
    driver: bridge
